## STATIC CONFIG (restart traefik to update)

# shows you a log msg if a newer image tag can be used
global:
  checkNewVersion: true

# log default is ERROR, but WARN is more helpful
log:
  level: WARN
  # level: INFO

# enable dashboard on 8080 with auth
api:
  dashboard: true

# enable ping so the `traefik healthcheck` works
ping: { }

# auto-proxy containers if they have proper labels
# and also use this file for dynamic config (tls)
providers:
  docker:
    endpoint: "unix:///var/run/docker.sock"
    exposedByDefault: false
  file:
    fileName: /etc/traefik/traefik.yml
    watch: true

serversTransport:
  insecureSkipVerify: true

# listen on 80/443, and redirect all 80 to 443 via 301
entryPoints:
  web:
    address: :80
    http:
      redirections:
        entryPoint:
          to: websecure
          scheme: https
          permanent: true
  websecure:
    address: :443
    http:
      tls: { }


## DYNAMIC CONFIG

tls:
  certificates:
    - certFile: "/etc/certs/cert.crt"
      keyFile: "/etc/certs/cert.key"

http:
  routers:
    kibana-router:
      rule: "Host(`kibana.example.com`)"
      entryPoints:
        - "websecure"
      service: kibana
    api-router:
      rule: "Host(`api.example.com`)"
      entryPoints:
        - "websecure"
      middlewares:
        - "authelia"
      service: app
    shorter-router:
      rule: "Host(`s.example.com`)"
      entryPoints:
        - "websecure"
      service: shorter
    authelia-router:
      rule: "Host(`authelia.example.com`)"
      entryPoints:
        - "websecure"
      service: authelia
    traefik-router:
      rule: "Host(`traefik.example.com`)"
      entryPoints:
        - "websecure"
      middlewares:
        - "authelia"
      service: api@internal


  services:
    kibana:
      loadBalancer:
        servers:
          - url: http://kibana:5601/
    app:
      loadBalancer:
        servers:
          - url: http://app:80/
    shorter:
      loadBalancer:
        servers:
          - url: http://app:80/
    authelia:
      loadBalancer:
        servers:
          - url: http://authelia:9091/

  middlewares:
    authelia:
      forwardauth:
        address: "http://authelia:9091/api/verify?rd=https://authelia.example.com/"
        trustForwardHeader: true
        authResponseHeaders: Remote-User,Remote-Groups,Remote-Name,Remote-Email

